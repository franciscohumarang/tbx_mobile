/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules/workbox-precaching
// for more information about precaching.
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (fileExtensionRegexp.test(url.pathname)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Push notification handling
self.addEventListener('push', (event) => {
  console.log('Push event received:', event);
  
  try {
    const data = event.data?.json() ?? {};
    console.log('Push data:', data);
    
    const title = data.title || 'TBX Medication Reminder';
    const options = {
      body: data.body || 'Time to take your medication!',
      icon: '/logo192.png',
      badge: '/logo192.png',
      data: data.data || {},
      actions: data.actions || [
        {
          action: 'confirm',
          title: 'CONFIRM',
        },
        {
          action: 'dismiss',
          title: 'Dismiss',
        },
      ],
    };

    console.log('Showing notification with options:', options);
    event.waitUntil(
      self.registration.showNotification(title, options)
        .then(() => console.log('Notification shown successfully'))
        .catch(error => console.error('Error showing notification:', error))
    );
  } catch (error) {
    console.error('Error in push event handler:', error);
  }
});

// Handle notification click
self.addEventListener('notificationclick', (event) => {
  console.log('Notification click event:', event);
  
  try {
    event.notification.close();

    if (event.action === 'confirm') {
      // Handle confirm action
      event.waitUntil(
        self.clients.matchAll({ type: 'window' }).then((clientList) => {
          console.log('Found clients:', clientList);
          
          // If a window client is available, navigate it to the confirm page
          for (const client of clientList) {
            if ('navigate' in client) {
              console.log('Navigating existing client to confirm page');
              client.navigate('/confirm-medication?id=' + event.notification.data.medicationId);
              return;
            }
          }
          
          // If no window client is available, open a new window
          if (self.clients.openWindow) {
            console.log('Opening new window for confirm page');
            return self.clients.openWindow('/confirm-medication?id=' + event.notification.data.medicationId);
          }
        })
      );
    } else {
      // Handle regular click (not on an action button)
      event.waitUntil(
        self.clients.matchAll({ type: 'window' }).then((clientList) => {
          console.log('Found clients for regular click:', clientList);
          
          for (const client of clientList) {
            if ('navigate' in client && client.visibilityState === 'visible') {
              console.log('Navigating existing client to home page');
              client.navigate('/');
              return;
            }
          }
          
          if (self.clients.openWindow) {
            console.log('Opening new window for home page');
            return self.clients.openWindow('/');
          }
        })
      );
    }
  } catch (error) {
    console.error('Error in notification click handler:', error);
  }
}); 